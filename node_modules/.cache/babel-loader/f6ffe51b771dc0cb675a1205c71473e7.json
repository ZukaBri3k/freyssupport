{"ast":null,"code":"var _jsxFileName = \"E:\\\\ForumProject\\\\freyssupport\\\\src\\\\pages\\\\SignUp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport { useRef } from \"react\";\nimport { UserContext } from \"../context/UserContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SignUp() {\n  _s();\n\n  const [validation, setValidation] = useState(\"\");\n  const {\n    currentUser,\n    signUp\n  } = useContext(UserContext);\n  const inputs = useRef([]);\n\n  const addInput = el => {\n    if (el && !inputs.current.includes(el)) {\n      //récupère tous les inputs\n      inputs.current.push(el);\n    }\n  };\n\n  const handleForm = async e => {\n    e.preventDefault();\n\n    if (inputs.current[1].value.length < 6) {\n      setValidation(\"6 characters minimum\");\n      return;\n    } else if (inputs.current[1].value !== inputs.current[2].value) {\n      setValidation(\"Les mots de passe ne sont pas identiques\");\n      return;\n    } //console.log(\"PRIVATE\", currentUser.email);\n\n\n    try {\n      const email = inputs.current[0].value;\n      const pwd = inputs.current[1].value;\n      const cred = await signUp(email, pwd); //attend une réponse de la requete signUp dans UserContext\n      //formRef.current.reset();\n      //console.log(cred.user.email);\n      //navigate(\"/private/private-home\");\n    } catch {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"text-light\",\n    children: \"Test\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 10\n  }, this);\n}\n\n_s(SignUp, \"e/CIBWTcIJKFHQcqa6JrirCuHb8=\");\n\n_c = SignUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUp\");","map":{"version":3,"sources":["E:/ForumProject/freyssupport/src/pages/SignUp.js"],"names":["React","useState","useContext","useRef","UserContext","SignUp","validation","setValidation","currentUser","signUp","inputs","addInput","el","current","includes","push","handleForm","e","preventDefault","value","length","email","pwd","cred"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,MAAT,QAAuB,OAAvB;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAC/B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAEO,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA0BP,UAAU,CAACE,WAAD,CAA1C;AAEA,QAAMM,MAAM,GAAGP,MAAM,CAAC,EAAD,CAArB;;AACA,QAAMQ,QAAQ,GAAIC,EAAD,IAAQ;AACvB,QAAIA,EAAE,IAAI,CAACF,MAAM,CAACG,OAAP,CAAeC,QAAf,CAAwBF,EAAxB,CAAX,EAAwC;AACtC;AACAF,MAAAA,MAAM,CAACG,OAAP,CAAeE,IAAf,CAAoBH,EAApB;AACD;AACF,GALD;;AAOA,QAAMI,UAAU,GAAG,MAAOC,CAAP,IAAa;AAC9BA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAIR,MAAM,CAACG,OAAP,CAAe,CAAf,EAAkBM,KAAlB,CAAwBC,MAAxB,GAAiC,CAArC,EAAwC;AACtCb,MAAAA,aAAa,CAAC,sBAAD,CAAb;AACA;AACD,KAHD,MAGO,IAAIG,MAAM,CAACG,OAAP,CAAe,CAAf,EAAkBM,KAAlB,KAA4BT,MAAM,CAACG,OAAP,CAAe,CAAf,EAAkBM,KAAlD,EAAyD;AAC9DZ,MAAAA,aAAa,CAAC,0CAAD,CAAb;AACA;AACD,KAT6B,CAW9B;;;AAEA,QAAI;AACF,YAAMc,KAAK,GAAGX,MAAM,CAACG,OAAP,CAAe,CAAf,EAAkBM,KAAhC;AACA,YAAMG,GAAG,GAAGZ,MAAM,CAACG,OAAP,CAAe,CAAf,EAAkBM,KAA9B;AACA,YAAMI,IAAI,GAAG,MAAMd,MAAM,CAACY,KAAD,EAAQC,GAAR,CAAzB,CAHE,CAGqC;AACvC;AACA;AACA;AACD,KAPD,CAOE,MAAM,CAAE;AACX,GArBD;;AAuBA,sBAAO;AAAG,IAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GApCuBjB,M;;KAAAA,M","sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { UserContext } from \"../context/UserContext\";\r\n\r\nexport default function SignUp() {\r\n  const [validation, setValidation] = useState(\"\");\r\n  const { currentUser, signUp } = useContext(UserContext);\r\n\r\n  const inputs = useRef([]);\r\n  const addInput = (el) => {\r\n    if (el && !inputs.current.includes(el)) {\r\n      //récupère tous les inputs\r\n      inputs.current.push(el);\r\n    }\r\n  };\r\n\r\n  const handleForm = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (inputs.current[1].value.length < 6) {\r\n      setValidation(\"6 characters minimum\");\r\n      return;\r\n    } else if (inputs.current[1].value !== inputs.current[2].value) {\r\n      setValidation(\"Les mots de passe ne sont pas identiques\");\r\n      return;\r\n    }\r\n\r\n    //console.log(\"PRIVATE\", currentUser.email);\r\n\r\n    try {\r\n      const email = inputs.current[0].value;\r\n      const pwd = inputs.current[1].value;\r\n      const cred = await signUp(email, pwd); //attend une réponse de la requete signUp dans UserContext\r\n      //formRef.current.reset();\r\n      //console.log(cred.user.email);\r\n      //navigate(\"/private/private-home\");\r\n    } catch {}\r\n  };\r\n\r\n  return <p className=\"text-light\">Test</p>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}